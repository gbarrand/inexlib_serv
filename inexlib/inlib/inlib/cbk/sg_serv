// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_sg_serv
#define inlib_cbk_sg_serv

#include "../sg/view_sg_serv"
#include "../sis"

namespace inlib {
namespace cbk {

inline inlib::sg::return_action action_sg_serv_launch(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_node) {
  inlib::sg::view_sg_serv* wdc = inlib::sg::cast_view_sg_serv(a_gv);
  if(!wdc) return inlib::sg::return_none;
  const std::string& host = a_node.values[0];
  if(a_node.numeric().number_type==sg::number_ip) {
    if(!is_ip(host)) {
      a_gv.map_warn("ip field is not an ip number");
      return inlib::sg::return_to_render;
    }
  }
  unsigned int port;
  if(!inlib::to<unsigned int>(a_node.values[1],port)) {
    a_gv.map_warn_nan();
    return inlib::sg::return_to_render;
  }
  if(!wdc->initialize(host,port)) {
    a_gv.map_warn("failed");
  } else {
    a_gv.map_warn("started",false);
  }
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_sg_serv_init(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::entries* entries = new inlib::sg::entries(a_gv.ttf());
  a_gv.set_style(*entries);
  inlib::sg::add_callback(a_gv,*entries,action_sg_serv_launch);
  entries->label = "initialize";

 {std::string host;
  if(!net::host_name(a_gv.out(),host)){
    a_gv.out() << "inlib::cbk::sg_serv : inlib::net::host_name() failed." << std::endl;
    entries->add_ip("this ip","");
  } else {
    std::string sip;
    if(!net::inet_sip(a_gv.out(),host,sip)){
      a_gv.out() << "inlib::cbk::sg_serv : inlib::net::inet_sip() failed." << std::endl;
      entries->add_ip("this ip","");
    } else {
      entries->add_ip("this ip",sip);
    //entries->add_string("this ip",sip);
    //entries->add_not_editable("this ip",sip);
    }
  }}
  entries->add_uint("port",50800);

  a_gv.push_list(entries);
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_sg_serv_finalize(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::view_sg_serv* wdc = inlib::sg::cast_view_sg_serv(a_gv);
  if(!wdc) return inlib::sg::return_none;
  wdc->finalize();
  return inlib::sg::return_none;
}

inline inlib::sg::return_action action_sg_serv_main(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  inlib::sg::add_item(a_gv,*list,"initialize",action_sg_serv_init);
  inlib::sg::add_item(a_gv,*list,"finalize",action_sg_serv_finalize);

  a_gv.push_list(list);
  return inlib::sg::return_to_render;
}

}}

#endif
