// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inexlib_serv.license for terms.

#ifndef inexlib_serv_inexlib_serv_main
#define inexlib_serv_inexlib_serv_main

#include <string>

namespace inexlib_serv {

class context {
public:
  context(const std::string&) {}
  virtual ~context() {}
protected:
  context(const context&){}
  context& operator=(const context&){return *this;}
};

}
#include "version"

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

#include <exlib/app/main>

#include <exlib/png>
#include <exlib/jpeg>

//#include <inlib/cbk/sg_client>
#include <inlib/cbk/sg_serv>
#include <exlib/cbk/out>

//#include <inlib/cbk/files>
#include <inlib/ftp/cbk>

#include <exlib/bsg_opener>
#include <exlib/sg/rbsg_factories>
#include <inlib/sg/rbsg_factories>

namespace inexlib_serv {

class main
:public exlib::app::main 
,public inlib::sg::view_evd 
{
  typedef exlib::app::main parent;
  typedef inlib::sg::view_evd parent_evd;
public:
  INLIB_SCLASS(inexlib_serv::main)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_evd>(this,a_class)) return p;
    return parent::cast(a_class);
  }
protected:
  INLIB_CLASS_STRING(format_dst)
protected:
  virtual inlib::sg::node* create_main_menu() {
    //m_out << "inexlib_serv::main::create_home_menu : " << std::endl;

    inlib::sg::list* list = new inlib::sg::list(ttf());
    set_style(*list);

    //list->text_height_automated.value(true); //too slow.
    //list->visible_items.value(10);

  //inlib::sg::add_image_item(*this,*list,inlib::sg::s_to_serv(),"connect_to_wall.jpg",inlib::cbk::action_sg_client_main);
    inlib::sg::add_white_item(*this,*list,inlib::sg::s_sg_serv(),inlib::cbk::action_sg_serv_main);
    
    inlib::sg::add_image_item(*this,*list,inlib::sg::s_files(),"files.jpg",inlib::cbk::action_files);
    if(has_open_panel()) {
      inlib::sg::add_image_item(*this,*list,"open...","files.jpg",inlib::sg::action_open_open_panel);
    }
    if(m_ftps.size()) {
      inlib::sg::add_image_item(*this,*list,"ftp","location_ftp.jpg",inlib::ftp::action_ftp,inlib::ftp::pos_data(m_ftps,false,0,0));
    }

    inlib::sg::add_white_item(*this,*list,"clear static sg",inlib::sg::action_clear_static_sg);
    inlib::sg::add_image_item(*this,*list,"clear dynamic sg","clear_event.jpg",inlib::sg::action_clear_dynamic_sg);
    //inlib::sg::add_image_item(*this,*list,"reset","edit_undo.jpg",inlib::sg::action_reset_camera);

    inlib::sg::add_image_item(*this,*list,"export","document_export.jpg",exlib::out::action_main);

    inlib::sg::add_image_item(*this,*list,"utils","tools.jpg",inlib::sg::action_utils);

   {std::vector<std::string> about;
    about.push_back("App : inexlib_serv");
    about.push_back("Version : "+std::string(INEXLIB_SERV_VERSION));
    about.push_back("Author : Guy Barrand");
    inlib::sg::add_image_item(*this,*list,"about","icon.jpg",inlib::sg::action_about,about);}

    if(!inlib::device::stop_app_button()){
      inlib::sg::add_image_item(*this,*list,"exit","application_exit.jpg",inlib::sg::action_set_to_exit);
    }

    return list;
  }

public:
  virtual bool insh_dispatch(const std::string& a_cmd,const std::vector<std::string>& a_args) {
    if(parent_evd::insh__dispatch(a_cmd,a_args)) return true;
    return parent::insh_dispatch(a_cmd,a_args);
  }
public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent("inexlib_serv",INEXLIB_SERV_VERSION,a_out,a_gl_mgr,a_ttf,a_selection,
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,parent_evd(parent::get_me())
  {
    m_opener.add_ext(inlib::file::s_ext_bsg());
   {inlib::sg::bsg_factories bfac;
    inlib::sg::add_factories(bfac);
    exlib::sg::add_factories(bfac);
#ifdef APP_USE_GRAPHVIZ
    bfac.add_factory<exlib::graphviz::scene>();
#endif
#ifdef APP_USE_HIV
    bfac.add_factory<exlib::iv::file>();
    bfac.add_factory<exlib::iv::so2sg>();
#endif
    m_opener.add_opener(inlib::file::s_format_bsg(),new exlib::bsg_opener(bfac));}

    m_image_readers.add_reader(inlib::file::s_format_jpeg(),new exlib::jpeg::reader());
    m_image_readers.add_reader(inlib::file::s_format_png(),new exlib::png::reader());

  //m_data_dirs.push_back(a_data_dir+inlib::sep()+"FOG");

    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    inlib::sg::set_empty_scene_3D(*this,*this);
  //set_meta_zone_had_not_been_shown();

/*
    // same as in inexlib_serv.scenarios/default :
   {inlib::sg::ortho* camera = new inlib::sg::ortho();
    camera->height = 5000;
    camera->znear = 500;
    camera->zfar = 50000;
    camera->position = inlib::vec3f(0,0,5000);
    camera->focal = 5000;
    camera->dx = 10;
    camera->da = 0.0085f; //0.5 deg
    camera->ds = 0.99f;

    replace_camera(camera);} //it takes ownership of camera.

    m_params.m_scene_screen_color = inlib::colorf_black();
*/
    show_main_menu();
  }
  virtual ~main() {}
protected:
  main(const main& a_from):parent(a_from),parent_evd(a_from){}
private:
  main& operator=(const main&){return *this;}
};

}

#endif
